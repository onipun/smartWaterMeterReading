package com.example.psm.v1.controller;

import com.example.psm.v1.database.User;
import com.example.psm.v1.database.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


// @Controller is used to mark classes as Spring MVC Controller.
// @RestController is a convenience annotation that does nothing more than adding the @Controller and @ResponseBody annotations
//example: So the following two controller definitions should do the same:-
////////////////////////////////////////////////
//@Controller
// @ResponseBody
// public class MyController { }
/////////////////////////////////////////////////
// @RestController
// public class MyRestController { }
/////////////////////////////////////////////////

@Controller  
@RequestMapping(path="/user")
public class LoginController {

    @Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/login-test")
	public @ResponseBody String getLoginTest() {
		// This returns a JSON or XML with the users
		return "success";
	}

	@GetMapping(path="/ldapUser")
	public @ResponseBody String getLdapUser() {
		// This returns a JSON or XML with the users
		return SecurityContextHolder.getContext().getAuthentication().getName();
	}



	
  
}