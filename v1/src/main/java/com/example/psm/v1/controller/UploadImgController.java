package com.example.psm.v1.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.example.psm.v1.database.UploadImg;
import com.example.psm.v1.database.UploadImgRepository;
import com.example.psm.v1.model.DataFetching;
import com.example.psm.v1.processing.TextDetection;
import com.example.psm.v1.processing.TextDetectionMethod2;
import com.lowagie.text.pdf.codec.Base64.InputStream;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping(path = "/upload")
public class UploadImgController {


    private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    Timestamp timestamp;
    long timeInMili;
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UploadImgRepository uploadImgRepository;
    private Date d1;

    @Autowired
    ApplicationContext applicationContext;

    // NOT TESTED YET, CONTINUE TOMMOROW (9/4/2014)
    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody String saveImgIntoDb(@RequestParam String imgName, @RequestParam int ownId,
            @RequestParam int uploadBy) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        d1 = new Date();
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/YYYY HH:mm a");
        // String formattedDate = df.format(d1);

        UploadImg n = new UploadImg();

        n.setImgName(imgName);
        n.setOwnerId(String.valueOf(ownId));
        n.setUploadBy(uploadBy);
        n.setDate(d1);
        uploadImgRepository.save(n);
        return "Saved";
    }

    @PostMapping(value = "/uploadImage2")
    public @ResponseBody String handleFileUpload(@RequestPart("image") MultipartFile file) {
        try {
            InputStream in = (InputStream) file.getInputStream();
            File newFile = new File("C:\\ca.jpg");
            if (!newFile.exists()) {
                newFile.createNewFile();
            }
            OutputStream out = new FileOutputStream(newFile);
            byte[] img = file.getBytes();
            out.write(img);
            out.close();
            return "success";

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return "failed";
        }
    }

    @PostMapping(value = "/img")
    public @ResponseBody String handleImageUpload(
            @RequestPart(value = "image",required = true) MultipartFile image, @RequestParam("identityCard") String identityCard,
            @RequestParam("isTrain") String isTrain) {

                ////////////////////////////////////////////////////////
                // assume the days is always 30 days
                // so the first 20m cube price is rm0.57
                // later 15m cube rm 1.03, remainder will cost rm 2.00
                ///////////////////////////////////////////////////////
        

                timestamp = new Timestamp(System.currentTimeMillis());
                timeInMili = timestamp.getTime();
                
		try{
            String path = "C:\\images\\"+timeInMili+".jpg";
			FileOutputStream fos = new FileOutputStream(path); //change the path where you want to save the image
            byte[] byteArray = image.getBytes();
			fos.write(byteArray);
            fos.close();
            TextDetectionMethod2 textDetectionMethod2 = new TextDetectionMethod2();

            Boolean save = false;
            if (isTrain.contains("yes")) {
                save = true;
                
            }

            System.out.println("render on image: "+ timeInMili + ".jpg");
            String imgRead = textDetectionMethod2.imgProc(path, save);

            
            return imgRead;
		}
		catch(Exception e){
            System.out.println(e);
            return "check server (logcat), something wrong while parsing at the server";
        }

    }

    //not test and implement in android yet
    @PostMapping(value = "/save")
    public @ResponseBody String saveResultIntoDb(@RequestParam("imRead") String imRead,@RequestParam("identityCard")  String identityCard){
            int date = new Date().getMonth();
            DataFetching dataFetching = applicationContext.getBean(DataFetching.class);
            Double prevMeterRead = dataFetching.getCurrentMonthMeterRead(date, identityCard);
            
            Double rangeMeterVal = Double.valueOf(imRead) - prevMeterRead;
            System.out.println("prev value: " + prevMeterRead);
            System.out.println("range value: " + rangeMeterVal);
            // Double firstPrice = Double.valueOf(rangeMeterVal) *  0.57;
            Double firstPrice = 0.0;
            Double secondPrice = 0.0, thirdPrice = 0.0;

            if (rangeMeterVal < 21) {
                firstPrice = Double.valueOf(rangeMeterVal) * 0.57;
                System.out.println("entered <21");
            }else if (rangeMeterVal > 20 && rangeMeterVal <= 35) {
                firstPrice = Double.valueOf(20) * 0.57;
                secondPrice = Double.valueOf(rangeMeterVal - 20) * 1.03;
            }else if (rangeMeterVal > 35) {
                firstPrice = Double.valueOf(20) * 0.57;
                secondPrice = Double.valueOf(15) * 1.03;    
                thirdPrice = Double.valueOf(rangeMeterVal - 35) * 2.00;
                System.out.println("Double.valueOf(20): "+Double.valueOf(20)+" rangeMeterValue "+ Double.valueOf(rangeMeterVal - 35));
                System.out.println("first price: "+ firstPrice+" seconde price: "+secondPrice+" Third price: "+thirdPrice);
            }

            Double price =  firstPrice + secondPrice + thirdPrice;
            
        try {
            UploadImg uploadImg = new UploadImg();
            uploadImg.setDate(timestamp);
            uploadImg.setImgName(timeInMili+".jpg");
            uploadImg.setImgRead(Double.valueOf(imRead));
            uploadImg.setOwnerId(String.valueOf(identityCard));
            uploadImg.setPrice(price);
            uploadImg.setStatus("act");
            uploadImgRepository.save(uploadImg);
            return "success save";
        } catch (Exception e) {
            //TODO: handle exception
            return "check logcat or method saveResultIntoDb";
        }
            

    }

    // this is just only for testing purpose
    // localhost:8080/upload/add-test?imgRead=0038
    @GetMapping(path="/add-test") // Map ONLY GET Requests
	public @ResponseBody String saveImgDataTest (@RequestParam String imgRead) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

        d1 = new Date();
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/YYYY HH:mm a");
        // String formattedDate = df.format(d1);

        UploadImg n = new UploadImg();
        
		n.setImgRead(100.00);
        n.setPrice(200.00);
        n.setDate(d1);
		uploadImgRepository.save(n);
		return "Saved";
    }
    
}